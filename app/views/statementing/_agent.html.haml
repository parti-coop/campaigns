- statement = statementable.statement_of(agent)

- if statement.try(:sure?)
  = link_to agent, class: 'btn btn-success btn-inverted', style: 'margin: 0 0 4px 0' do
    = image_tag agent.image.md.url, style: "height: 24px;"
    %strong= agent.name
    %small= statement.stance.text
- else
  %button.btn.btn-default.btn-inverted.cursor-default{"data-target" => "#comment-to-agent-modal-#{agent.id}", "data-toggle" => ("modal" if !statementable.try(:closed?)), :type => "button", style: 'margin: 0 0 4px 0'}
    = image_tag agent.image.md.url, style: "height: 24px;"
    %strong= agent.name
    %small.text-danger
      - count = statementable.comments.with_target_agent(agent).count
      - if !statementable.try(:closed?)
        촉구하기 #{count > 999 ? "(999+)" : (count > 0 ? "(#{count})" : nil)}

  %div.modal.fade{id: "comment-to-agent-modal-#{agent.id}", :role => "dialog", :tabindex => "-1"}
    .modal-dialog{:role => "document"}
      .modal-content
        .modal-header
          %button.close{"aria-label" => "Close", "data-dismiss" => "modal", :type => "button"}
            %span{"aria-hidden" => "true"} &#215;
          %h4.modal-title
            = image_tag agent.image.md.url, style: "height: 36px;"
            %strong= agent.name
            에게 촉구하기
            %small= agent.organization
        .modal-body
          .comments-form
            = form_for Comment.new, html: { class: 'gov-action-form-validation' } do |f|
              = hidden_field_tag :back_commentable, '1'
              = f.hidden_field :commentable_type, value: statementable.class.name
              = f.hidden_field :commentable_id, value: statementable.id
              = f.hidden_field :target_agent_id, value: agent.id
              .gov-action-form-grecaptcha
              - unless user_signed_in?
                .form-group
                  = f.label :commenter_name
                  = f.text_field :commenter_name, class: 'form-control', data: { 'rule-required': true }
                .form-group
                  = f.label :commenter_email, agent.email.present? ? "이메일(#{agent.name}님에게 메일을 발송하려면 반드시 넣어주세요)" : nil
                  = f.text_field :commenter_email, class: 'form-control'
              .form-group
                ~ f.text_area :body, placeholder: '제 생각에는...', class: 'form-control validate ' + ( is_redactorable? ? 'redactor' : ''), data: { 'rule-required': true }
              - if agent.email.present?
                .form-group
                  .checkbox
                    %label{ style: 'font-weight: bold' }
                      = f.check_box :mailing, { checked: true }, 'ready', 'disable'
                      #{agent.name}님에게 메일로도 발송합니다.
              - if commentable.try(:confirm_privacy).present?
                .form-group
                  .campaign-sign-privacy-policy
                    촉구하기를 누르시면 본 서명의
                    %a{ "data-target" => "#privacy-modal", "data-toggle" => "modal", :type => "button", style: 'cursor:pointer' }
                      개인정보취급방침
                    에 동의하게 됩니다.
                  #privacy-modal.modal.fade{:role => "dialog", :tabindex => "0"}
                    .modal-dialog{:role => "document"}
                      .modal-content
                        .modal-header
                          %button.close{"aria-label" => "Close", "data-dismiss" => "modal", :type => "button"}
                            %span{"aria-hidden" => "true"} &#215;
                          %h4.modal-title 개인정보취급방침
                        .modal-body
                          != commentable.confirm_privacy
              = f.submit "#{count+1}번째로 촉구하기", class: 'btn btn-danger btn-block'
